@model Hola.Models.DataModels.Products

@{
    ViewBag.Title = "Products";
}



@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal dark mt-20">
        <h2 class="text-center edit-entity-title">Edit Product</h2>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.ProductID)

        <div class="row">
            <div class="col-md-6">
            <div class="form-group">
                @Html.LabelFor(model => model.ProductName, htmlAttributes: new { @class = "control-label col-md-3" })
                <div class="col-md-9">
                    @Html.EditorFor(model => model.ProductName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.ProductName, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.SupplierID, "SupplierID", htmlAttributes: new { @class = "control-label col-md-3" })
                <div class="col-md-9">
                    @Html.EditorFor(model => model.SupplierID, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.SupplierID, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.CategoryID, "CategoryID", htmlAttributes: new { @class = "control-label col-md-3" })
                <div class="col-md-9">
                    @Html.EditorFor(model => model.CategoryID, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.CategoryID, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.QuantityPerUnit, htmlAttributes: new { @class = "control-label col-md-3" })
                <div class="col-md-9">
                    @Html.EditorFor(model => model.QuantityPerUnit, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.QuantityPerUnit, "", new { @class = "text-danger" })
                </div>
            </div>
                </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.UnitPrice, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @Html.EditorFor(model => model.UnitPrice, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.UnitPrice, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.UnitsInStock, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @Html.EditorFor(model => model.UnitsInStock, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.UnitsInStock, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.UnitsOnOrder, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @Html.EditorFor(model => model.UnitsOnOrder, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.UnitsOnOrder, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.ReorderLevel, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @Html.EditorFor(model => model.ReorderLevel, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.ReorderLevel, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Discontinued, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        <div class="checkbox">
                            @Html.EditorFor(model => model.Discontinued)
                            @Html.ValidationMessageFor(model => model.Discontinued, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-12 text-center">
                <input type="submit" value="Save" class="btn btn-primary" style="width:100%" id="submit_form" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index", null, null,  new { @class = "back-to-list" })
</div>
<div class="alert alert-success hide" role="alert">
    Product edited successful
</div>

@section Scripts{
    <script>
        (function () {
            //Timers
            var fields_validation = document.getElementsByClassName("field-validation-valid");

            var btn_submit = document.getElementById("submit_form");
            btn_submit.addEventListener("click", sendData, false);

            function sendData(e) {
                e.preventDefault();
                if (validateFields() == true) {
                    document.getElementsByClassName("alert-success")[0].classList.remove("hide");
                    document.getElementsByTagName("form")[0].submit();
                }
                else {
                    
                }

            }

            function validateFields() {
                var isOk = true;
                var product_name = document.getElementById("ProductName");
                var unit_price = document.getElementById("UnitPrice");
                var units_in_stock = document.getElementById("UnitsInStock");
                var units_on_order = document.getElementById("UnitsOnOrder");
                var reorder_level = document.getElementById("ReorderLevel");
                //Validating fields
                if (product_name.value == "") {
                    var span = product_name.parentNode.getElementsByTagName("span");
                    span[0].innerHTML = "Product Name must not be empty";
                    span[0].classList.add("text-danger-visible");
                    doSomethingWithTimeOut(span[0], "text-danger-visible", 1500);
                    isOk = false;
                }
                if (isNaN(unit_price.value.split(",").join("."))) {
                    var span = unit_price.parentNode.getElementsByTagName("span");
                    span[0].innerHTML = "Unit price field must contain a number";
                    span[0].classList.add("text-danger-visible");
                    doSomethingWithTimeOut(span[0], "text-danger-visible", 1500);
                    isOk = false;
                }
                if (isNaN(units_in_stock.value)) {
                    var span = units_in_stock.parentNode.getElementsByTagName("span");
                    span[0].innerHTML = "Units in Stock field must contain a number";
                    span[0].classList.add("text-danger-visible");
                    doSomethingWithTimeOut(span[0], "text-danger-visible", 1500);
                    isOk = false;
                    
                }
                if (isNaN(units_on_order.value)) {
                    var span = units_on_order.parentNode.getElementsByTagName("span");
                    span[0].innerHTML = "Units on Order field must contain a number";
                    span[0].classList.add("text-danger-visible");
                    doSomethingWithTimeOut(span[0], "text-danger-visible", 1500);
                    isOk = false;
                }
                if (isNaN(reorder_level.value)) {
                    var span = reorder_level.parentNode.getElementsByTagName("span");
                    span[0].innerHTML = "Reorder Level field must contain a number";
                    span[0].classList.add("text-danger-visible");
                    doSomethingWithTimeOut(span[0], "text-danger-visible", 1500);
                    isOk = false;
                }
                return isOk;
            }

            function doSomethingWithTimeOut(element, cl, time) {
                setTimeout(function () {
                    element.classList.remove(cl);
                    element.innerHTML = "";
                }, time);
            }

        })();
    </script>

}
